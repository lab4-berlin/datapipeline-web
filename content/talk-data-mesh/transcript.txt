Hello, thanks a lot for the intro and for the opportunity. I will talk about data mesh today, but primarily about people. The title is data mesh beyond the hype. In a lot of cases, it actually fails because of people, not because of Czech, and I think that's something we should try to fix together. Today I'm standing on the shoulders of the giants, people much smarter than me who were talking about similar things for centuries. For example, Newton said that mad madness of man is not predictable and I agree. Cut. Today I'm standing on the shoulders of the giants, people much smarter than me who were talking about similar things for centuries. For example, Newton apparently said, "The madness of man is not predictable." Richard Fineman was talking about reality and the fact that you also have public relation presentations and marketing materials and so on. But sometimes the laws of nature or physics they kind of win.
So maybe we should start with facts. Last but not least, Napoleon apparently used to say that 75% of the battle success depends on people and communication between them and only 25% are things like how many guns you have, how much manpower and so on. Let's talk about data mesh. Now I will briefly elaborate on what it is about and why the social component is so important. Jamak who back then used to work at a company. I suppose you have heard about something. Jamak who back then used to work at a company I suppose you have heard something about introduced the term in 2019. To me it feels much longer but it's actually just six years ago. Data mesh is built upon four basic principles. First you have domain oriented cut. First you have domain ownership which means teams own their data. It's not somebody else problem. You basically move responsibility to domain teams. The second principle is data as a product. And I guess the workshop earlier today was mainly about it.
You treat data as a product. You apply the same quality criteria. you expected to have SLAs and all those beautiful things. It's not anymore something you produce which your systems cut. It's not anymore something you produce with your systems and then maybe somehow utilize. No, now it itself becomes a product. You need a selfserve data platform in order to accomplish this. Meaning your data team should not be the traditional dashboard factory, not a serviceoriented team anymore, which is only there to do whatever people ask for. No, now their job is to provide infrastructure. They should enable other teams and teach and support them. Last but not least, and that's the fourth principle, you still unfortunately need federated computational governance because otherwise you will end up in a bit of a chaotic setup. So you have freedom, but you also have rules. And just to remind you, normally you would on top have regulations, compliance, quality standards, and in some industries, for example, if you're in banking or e- health, it's business critical if things go wrong.
The data mesh is not just about tech. According to the old good Wikipedia, it's a social technical approach. Mind the order of words please. There is a reason for that. Similarly, it's not an architecture. It's not a tool. It goes a bit deeper into your organizational setup and the way you solve your problems. And I'm almost certain that it will fail if you focus on tech too much. Now, it's a good time for a few anecdotes from my client interviews. I'm freelancing and companies I talk to sometimes ask can we do data mesh here we interested in this idea. So my observation is mostly they put it as a technical question. They give me a lot of technical details. They talk about the stack cloud developers. Temporarily they talk about their people and how these people communicate or about how their business works and how it uses the data. They seem to think that this is an engineering problem. I guess many of us here have engineering background and we sometimes tend to start with a solution, start with the technology and that's where we end up.
So yes, this all sounds likecould you please upgrade my data data mesh to the next version as if it would be a library. two more stories from my past when I was permanently employed. I was once interviewed for a director position in a scaleup. Actually very smart people worked there. I got up to the technical screening with the team and I spoke with engineers who were really skilled and they knew about data mesh. So we had a wonderful discussion. We discussed pros and cons and how we could do it together with me leading them. The interview went really well I thought. And then after the interview I got the feedback that I'm not passionate enough about data mesh and they will not be proceeding with my application. I mean honestly if being passion means just blindly doing something by the book and not talking about things which could go wrong then yes I'm not patient. I have another example, a small startup. In this case, I was interviewed by the co-founder who also did the job of a CTO.
He had three people in the I, data team and was looking for the new head of data. So he read about data mesh and was very excited and asked me how can we do it here with our two data analysts and a data engineer. I was nice and polite as always. So I told him even so we could technically decentralize three people if this was the goal but which business problem would it solve? Why should we do that? In this case the rejection feedback was he's too focused on traditional architectures. I am very happy I didn't end up in either of these companies. So I was not complaining. I was just trying to demonstrate how many misconceptions actually are out there. Okay. But why is it like this? Sometimes I would say the problem is a cargo cult. Many companies just copy big players. They think if Salando or whoever is a reference here here in Germany is adopting data mesh they should do it as well.
They want to be like Salando as successful as them. You need to understand principles. You need to understand ideas. You need to be smart in applying any solution and not start with let's decentralize three people team. I do believe it's crucial to start with a problem and not with a solution. Now when we got an overview of what actually data mesh is and the importance of social component of it, let us deep dive into the decentralization part. I would also like to explore what we can learn from DevOps and quality assurance teams which went through similar transformations. We will also touch upon the microservices architecture the way to develop decentralized systems. Let's start with it as I guess most of the people have here have a technical background and love technology. You all know this picture, old terrible monolith. Nobody likes it. We can do nothing here. We cannot add features. We cannot fix bugs. Please business people just give us time and resources for a big refactoring project.
With the new modern microservices paradigm based approach, everything is going to be so shiny. I heard that so many times and I have a strong opinion. Monolith is not equal bad. Monolit is not necessarily bad. Cut. And I have a strong opinion here. Monolith is not equal bad. Monolith is not necessarily bad. I saw terrible monoliths and beautiful monoliths. Yes, it's true it doesn't scale at some point. But will you reach this point? It can become unmanageable. Um you also are at risk if your team lacks experience with this type of architecture. If you only have engineers who never worked with this, I do see all the drawbacks. Still let me ask you will switching to microservices always help. Looks like we are trying to find a solution for a complex business problem. So we will need a complex system. Why do we think that splitting the system into many smaller subsystems will reduce the overall complexity? This all comes with a cost, right?
The complexity of your system doesn't vanish. often it just moves to the communication layer. Sadly, microservices are not a silver bullet as it looks like. I personally heard so many horror stories. I guess I'm not alone and the next slide will resonate with many people. Imagine you have got time for that huge refactoring. You start splitting things, decentralizing things and you end up in a situation like this. I will just hold on here for a second. I like this slide very much. So we should avoid the same outcomes while moving to the data mesh from a bad functioning centralized data team. Let's talk about agile. Those are great ideas. I am very into it. Even though I was very skeptical when I first heard about scrum maybe 15 years ago, the problem I saw with it in the practice is similar to what we discussed before. It's wrongly implemented, misunderstood or you see carbocal. Nevertheless, it very much influenced the way how development teams work.
It caused a huge mind shift cut. It caused cut. It caused a huge mindset shift. But it all took time. Teams which are doing great agile development now have probably struggled a lot when they just started. misconceptions, picking only easy parts and ignoring the hard stuff. copying other people's behavior. It's all is set up to fail. good news, the agile manifesto is a one page long document, so everyone can spend five minutes and read it and it's worth reading. It talks exactly about what people tend to skip basic principles of agile, most of which are self-explanatory. If you understand these principles, agree with them and stick to them, then hopefully you can fix something which is not working well. If you just run daily stand-ups and weekly retrospectives, uh, but for example, your developers are isolated from the cut. If you just run daily standups and bi-weekly retrospectives but for example your developers are isolated from the end user you and you call this agile. I have some bad news for you.
Now let us talk about quality assurance and how they moved into domain teams. QA used to be a separate centralized team like in most of the companies data is nowadays cut. Now let's talk about quality assurance and how they moved into domain teams. QA used to be a separate centralized team in most of the companies exactly like many data teams are today. Developers just threw tickets or code over the wall and said go on test my code. Exactly like now many of us are observing backend developers who tell us hey I added this new feature this is why we have a new message in Kafka or maybe a new table in the production database now it's your turn just do your data magic in your fancy dashboards I don't want to know what you do there because I'm not data so today the time of centralized quality assurance teams is almost Testing is a part of the job. Everyone is a bit of a QA and QA experts now are helping developers and teach them how to test properly.
They do pair programming sessions. They help set up infrastructure for automated testing. The need is still there, but they don't test what other people do anymore. DevOps. I remember when the whole DevOps movement started, it was about breaking silos. Let's not be system admins anymore. Let's do platform teams and provide infrastructure, but let other people build their own systems with it. At some point, many of my DevOps colleagues were embedded into domains. You also have governance challenges. challenges is this case exactly like in data world. If you let it to be a free ride, you are going to fail either with a cloud cost or with some security issues. The list goes on. As we discussed earlier, splitting a bad monolith will not help. Data mesh is the same. If the root cause of your problem is actually lack of data culture in a company, communication challenges between business and teams or across teams. If your engineers and analysts are lacking some crucial skills either technical or social or my favorite, if nobody is using the data for decision- making, then we can build beautiful systems, advanced dashboards, we can do everything.
It will not help. And we all know what happens when companies run out of money and need to make hard choices. We all went through this phase two, three years ago. Decentralization won't fix it and eventually it can make it worse. As NoSQL was not a silver bullet bullet cut as NoSQL was not a silver bullet. remember people who used MongoDB because they could not understand relational um mostly they also didn't succeed with Mongo now to more practical things what can we do about it here I would highlight three things autonomy of teams hiring approach to improve the situation and last but not least the governance if we want our teams to be autonomous and end to end responsible. We need to trust them. If you give a group of people with different skills a task, you should have confidence that they can accomplish it and you should not micromanage them. Teams should fall fully own their data. As already stated, it should not be that somebody builds a product and then somebody else does anything with data which this product produces.
To accomplish that software cut to accomplish that, teams fully own the data. Software engineers need to become better in working with data. Data people in turn need to become better in engineering. Crucial is also to assure that the cross functional team is selforganizing. You can help them in the beginning. You can give some guidance or directions but in the ideal case your team should not permanently need a manager. It should self-organize. To achieve this, the team me cut to achieve this team members should understand the business and not just be focusing on data pipelines and database tables. At the same time, your data analysts will need engineering skills and cannot solely focus on business and reports. If you successfully assure autonomy and cross functionality of your teams, this will reduce the number of dependencies between them. and also decrease the risks of having bottlenecks. You should be able to deliver value faster. Cut. Let's deep dive a bit more and see what else we need to change on the data side to get there.
I will now list things which I believe we should stop doing. Nobody wants a data engineer who waits for the perfect ticket and perfect requirements. Same with attitudes like I don't know what's in this table or in this column. I also don't want to know. I'm just copying it from from A to B. Probably those people would be first to be replaced with an automated solution soon. Next point, data team members should challenge their business users. They should ask why are you asking us to do this or that. Of course, it requires some seniority. But nobody even less experienced team members should be in execution mode in just tell me what to do mode. They should be interested in the domain they work in otherwise it could be difficult to collaborate with business people. They should never start with a solution rather with a with a problem. This often requires a mind shift. On the other hand, data analysts have similar challenges. Statements like, "I'm not technical. I
don't do SQL. Somebody should prepare data for me." And no longer acceptable. It's simply too late for that in 2025. Equally, analysts who just constantly produce new dashboards. I feel like they're saying, "I give up. I don't understand what the business guy wants from me. I have hundreds of dashboards. I just put another one on top. Finally, machine learning professionals being asked why their model doesn't work and the results are garbage used to say like it's because of data. Fix the data quality and come back. And when engineers ask them, what do you mean? Can you define the quality criteria? They sometimes answered, it's too technical for me. Switching to the data governance topic. First and foremost, decentralization doesn't mean no rules. One of my favorite stories about processes and system design is about how path in the University of Washington in Seattle were built. Apparently, the administration delayed paving a certain path. Instead, they planted grass everywhere and just observed where students naturally walked.
After a few weeks or months, they paved those path aligning them with actual student behavior. You are lucky if you have the ability to establish processes and run governances this way. Basically, just make what people naturally do to a rule. That's awesome and that's easy to enforce. If you need to change behaviors, it's a bit more work. In order to govern your data, you will need to do a lot of this work. You will need ownership, data contracts, observability, linage, data catalogs, quality metrics, and automated checks and much more. In the decentralized world, you need those things even more than in your old setup. But the governance in this case is not a bottleneck. It's not like somebody who controls you. It's rather a service, a safety net which sets the rules and helps you to comply. Please don't forget the more natural those rules are, the easier it will be to enforce them. And finally, my favorite topic, servant leadership. Cut. Finally, my favorite topic, servant leadership.
These ideas became very popular during the last decade. As already stated, trust is crucial. Now your job as a leader is not to tell people what to do, but rather remove the obstacles from their way and cut. And finally, my favorite topic, servant leadership. These ideas became very popular during the last decade. As already stated, trust is crucial. Now your job as a leader is not to tell people what to do, but rather remove the obstacles from their way and support them. It's on you to assure that the culture and the environment team members have is allowing them to do their best. You should constantly ask them for feedback and act on it to create a setup where they tell you early enough if things go into the wrong direction. If you ask me, those are beautiful ideas. You hire smart people, you assume they can do what you need them to do. If they don't deliver business value, then those were the wrong people. At some point you have built your team and hopefully everything works.
You have probably seen this inverted pyramid. Before people used to always put the CEOs on the top and then you would have some top managers and employees are represented below. Now on the contrary on top you have the employees who deliver value to your clients and actually matter and make your company successful and below you have the managers who support them and are more necessary overhead and internal service and then at the lowest level you have the CEO the backbone which supports everyone. Final comment here. It all sounds a bit idealistic. Exactly like many wonderful diversity ideas. In my opinion, now that the times are a bit more harsh for our industry, many people give up and get back to the old fashioned structures and methods. I still believe it's a mistake to do so. Yes, I still believe if you do it right, if you build an autonomous and end to end responsible diverse team, if you went through the storming phase in the beginning, they would outperform other setups. So, it's not only better for people, it's better for your business.
We are reaching the end of the presentation. Let us talk about hiring for the data mesh. Normally cut. We are reaching the end of the presentation. Let us talk about hiring for the data mesh. What is important to consider when hiring for a data mesh setup. Disclaimer. What I say now just summarizes my experience. Everyone is different. Every team is different. There is no right or wrong in hiring. You should do whatever helps you to find the right people for your team. Okay. There is one thing which is always wrong. It's hosting hosting candidates. Cut. okay. There is one thing which is always wrong. It is hosting candidates. So I will share a few basic ideas I learned after more than 250 interviews I did as a hiring manager. First and foremost, weak yes means a no. In most cases, I use a scale with four possible interview outcomes.
Strong no, no, weak yes, and strong yes. I tend to only proceed with people who got a strong yes. I truly believe you should only hire candidates where you have this feeling. Yeah, that's exactly the person I was looking for. This is similar to machine learning models. You have false positives and false negatives. But in hiring, false positives are extremely dangerous. If you hire the wrong person, it can be much more damaging than rejecting a great candidate. So, if you reject somebody who would be a perfect fit, it's sad. It's said for you and it's not nice for the person, but they will find another job and you will probably find another candidate. On the contrary, if you hire the wrong person, this can be a huge trouble for the company. Sometimes even an empty seat is actually better than having the wrong person on that seat. So, don't put your business in danger. Don't hire candidates until you are dead sure those are the right candidates.
Second principle, soft skills normally outperform hard skills or tech skills. Don't get me wrong, I'm not saying you should hire somebody very junior and ling basic tech skills for senior positions. Of course not. You have minimal requirements level for the hard skills. The problem is that in my experience, people especially engineers mostly look at the hard skills when they do interviews. So let's assume they wait 80% hard skills, tools, technologies, frameworks and only 20% soft skills which can be attitude, communication, understanding of business. I would almost dare to say it should be exactly other way around. You should put 80% on soft skills. It is difficult to change the mindset or or attitude of a person. Right? So even if you find somebody who has great technical skills but a wrong attitude, I don't think it's recoverable. On the contrary, teaching somebody a tool or a framework is just teaching. So don't put yourself at risk. Cut. Data teams are getting smaller nowadays. Data departments are shrinking in many companies.
Often you don't have that many layers of management and data anymore. And it all gets back to flat here or here. So I think it's getting even more important to be a generalist instead of a narrow specialist. this concept of T-shaped people versus Ishaped people. We can still get a job if you have deep expertise in a single area, but cut. You can still get a job if you have deep expertise in a single area, but little to no knowledge across. But this position will probably be in a huge company in a corporate where they have heavy infrastructure. If you're interested in working for startups or scaleups, I guess moving towards becoming a generalist makes sense. Finally, please keep in mind that interviewing is a skill. The more interviews people do, the better they get. You should consider that some great people are simply bad in interviewing. And you're not looking for somebody who is great in interviews, somebody who is perfectly solving coding challenges and delivering awesome task take-home assignments.
You want to hire somebody who will deliver great work. It's time to summarize. Here are some final takeaways I would like you to reflect on. I suggest we start with people and not with tech first. We need to assure that people we work with and teams are adopting cut. I suggest we start with people and not with tech first. We need to assure that people we work with are adopting before we roll out technologies. AI will not remove the need to collaborate. Even if it automates many tasks, most of the challenges I was highlighting in this talk will most probably stay with us for a while. Start with a problem. Don't go for hype technologies. Things you should cut. And finally, things you should not do. In my opinion, please don't think after this talk that data mesh is a microservices for data. It's not. I just used this analogy. You should not hope that data mesh solves all your data challenges. It's not a silver bullet. Cut. You should not expect that data mesh solves all your data challenges. It's not a silver bullet. Please assure your teams are prepared to take ownership for their data. For that, constant feedback is necessary. If you don't get honest feedback about things which go wrong, it puts your project at risk. Cut. All in all people, first processes and technologies will follow. Thanks a lot for your attention. I really enjoyed giving this talk